app:
  telegram-token: ${TELEGRAM_TOKEN}
  scrapper-uri: "http://${SCRAPPER_HOST}:8080"
  scrapper-topic:
    name: "scrapper.message"
  dlq-topic:
    name: "scrapper.message_dlq"

spring:
  cache:
    cache-names:
      - rate-limit-buckets-bot
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
  application:
    name: bot
  jackson:
    time-zone: UTC

kafka:
  consumer:
    bootstrapServers: ${KAFKA_HOST}:${KAFKA_PORT}
    groupId: bot_consumer
    autoOffsetReset: latest
    maxPollIntervalMs: 300_000
    enableAutoCommit: true
    concurrency: 1
  producer:
    bootstrapServers: ${KAFKA_HOST}:${KAFKA_PORT}
    clientId: bot_producer
    acksMode: all
    deliveryTimeout: 60s
    lingerMs: 12_000
    batchSize: 100_000
    maxInFlightPerConnection: 5
    enableIdempotence: true


bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets-bot
      url: .*
      strategy: first
      http-response-body: "{ \"code\": 429, \"error\": \"Too Many Requests\", \"description\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: getRemoteAddr()
          bandwidths:
            - capacity: 100
              time: 1
              unit: hours

management:
  server:
    port: 8091
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
      base-path: /
      path-mapping:
        prometheus: /metrics
  metrics:
    tags:
      application: ${spring.application.name}

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml
