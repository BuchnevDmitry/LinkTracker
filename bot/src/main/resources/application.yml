app:
  telegram-token: ${TELEGRAM_TOKEN}
  scrapper-uri: http://localhost:8080
  scrapper-topic:
    name: "scrapper.message"
  dlq-topic:
    name: "scrapper.message_dlq"

spring:
  kafka:
    consumer:
      bootstrapServers: localhost:29092
      groupId: bot_consumer
      autoOffsetReset: latest
      enableAutoCommit: true
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

    producer:
      bootstrapServers: localhost:29092
      clientId: bot_producer
      acks: all
      batch-size: 100000
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  cache:
    cache-names:
      - rate-limit-buckets-bot
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
  application:
    name: bot
  jackson:
    time-zone: UTC


bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets-bot
      url: .*
      strategy: first
      http-response-body: "{ \"code\": 429, \"error\": \"Too Many Requests\", \"description\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: getRemoteAddr()
          bandwidths:
            - capacity: 100
              time: 1
              unit: hours

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml
